// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"uims/app/ums/service/internal/biz"
	"uims/app/ums/service/internal/conf"
	"uims/app/ums/service/internal/data"
	"uims/app/ums/service/internal/data/dao"
	"uims/app/ums/service/internal/server"
	"uims/app/ums/service/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewCache(confData, logger)
	asyncProducer := data.NewKafkaProducer(confData)
	consumer := data.NewKafkaConsumer(confData)
	dataData, cleanup, err := data.NewData(db, client, asyncProducer, consumer, logger)
	if err != nil {
		return nil, nil, err
	}
	umsUserModel := dao.NewUmsUserModel(db, logger)
	userRepo := data.NewUserRepo(dataData, umsUserModel, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	userService := service.NewUserService(userUseCase, logger)
	grpcServer := server.NewGRPCServer(confServer, logger, userService)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
