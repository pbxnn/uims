// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"uims/app/orgms/rpc/internal/biz"
	"uims/app/orgms/rpc/internal/conf"
	"uims/app/orgms/rpc/internal/data"
	"uims/app/orgms/rpc/internal/data/dao"
	"uims/app/orgms/rpc/internal/server"
	"uims/app/orgms/rpc/internal/service"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, registry *conf.Registry, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	db := data.NewDB(confData, logger)
	client := data.NewCache(confData, logger)
	syncProducer := data.NewKafkaProducer(confData)
	dataData, cleanup, err := data.NewData(db, client, syncProducer, logger)
	if err != nil {
		return nil, nil, err
	}
	orgmsCompanyModel := dao.NewOrgmsCompanyModel(db, logger)
	companyRepo := data.NewCompanyRepo(dataData, orgmsCompanyModel, logger)
	companyDO := biz.NewCompanyDO(companyRepo, logger)
	companyService := service.NewCompanyService(companyDO, logger)
	departmentService := service.NewDepartmentService()
	userService := service.NewUserService()
	grpcServer := server.NewGRPCServer(confServer, companyService, departmentService, userService, logger)
	registrar := server.NewRegistrar(registry)
	app := newApp(logger, grpcServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
